import pygame
import sys
import random
import time

# Inisialisasi pygame
pygame.init()

# Konstanta
SCREEN_WIDTH, SCREEN_HEIGHT = 820, 600
WHITE = (255, 255, 255)
BLUE = (135, 206, 250)
BROWN = (139, 69, 19)
RED = (255, 0, 0)
YELLOW = (255, 223, 0)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
GRAY = (200, 200, 200)

# Setup layar
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Terrarun")

# Load background image
bg_image = pygame.image.load("PBO__UAS/origbig.png").convert_alpha()
bg_image = pygame.transform.scale(bg_image, (SCREEN_WIDTH, SCREEN_HEIGHT))

# Font untuk UI
font = pygame.font.SysFont("Roboto", 38)
large_font = pygame.font.SysFont("Roboto", 70)

# Base class untuk game objek
class GameObject: #inheritance
    def __init__(self, x, y, width, height, color):
        self.rect = pygame.Rect(x, y, width, height)
        self.color = color

    def draw(self): 
        pygame.draw.rect(screen, self.color, self.rect)

# Player class dengan animasi
class Tera(GameObject): #inheritance
    def __init__(self):#inheritance
        super().__init__(50, 420, 100, 127, RED) #inheritance
        self._speed = 4 #encapsulation
        self._velocity_y = 0
        self._gravity = 1
        self._jump_force = -18
        self._is_jumping = False
        self.lives = 3
        self.last_hit_time = 0

        # Load sprite untuk animasi berjalan dari folder 'attack'
        self.run_sprites = [
            pygame.image.load(f"PBO__UAS/player/run/Run{i}.png").convert_alpha()
            for i in range(1, 9)
        ]
        self.current_sprite_index = 0
        self.animation_speed = 0.1  # Kecepatan animasi
        self.time_since_last_frame = 0

    def update_animation(self):
        current_time = pygame.time.get_ticks()
        if current_time - self.time_since_last_frame > self.animation_speed * 1000:
            self.current_sprite_index = (self.current_sprite_index + 1) % len(self.run_sprites)
            self.time_since_last_frame = current_time

    def move(self, keys):
        if keys[pygame.K_LEFT]:
            self.rect.x -= self._speed
            self.update_animation()
        if keys[pygame.K_RIGHT]:
            self.rect.x += self._speed
            self.update_animation()
        if keys[pygame.K_SPACE] and not self._is_jumping:
            self._is_jumping = True
            self._velocity_y = self._jump_force

    def apply_gravity(self, platforms):
        self._velocity_y += self._gravity
        self.rect.y += self._velocity_y

        on_platform = False
        for platform in platforms:
            if self.rect.colliderect(platform.rect) and self._velocity_y >= 0:
                if self.rect.bottom <= platform.rect.top + 10:
                    self.rect.bottom = platform.rect.top
                    self._velocity_y = 0
                    self._is_jumping = False
                    on_platform = True

        if not on_platform and self.rect.bottom >= 500:
            self.rect.bottom = 500
            self._velocity_y = 0
            self._is_jumping = False

    def draw(self):
        if self.run_sprites:
            frame = self.run_sprites[self.current_sprite_index]
            screen.blit(frame, self.rect.topleft)
        else:
            super().draw()

    def is_invincible(self):
        return time.time() - self.last_hit_time < 2

# Platform class
class Platform(GameObject):
    def __init__(self, x, y, width, height=10):
        super().__init__(x, y, width, height, GRAY)

# Coin class
class Coin(GameObject):
    def __init__(self, x, y):
        super().__init__(x, y, 20, 20, YELLOW)

    def draw(self): 
        pygame.draw.ellipse(screen, self.color, self.rect)

# Enemy class
class Enemy(GameObject):
    def __init__(self, x, y):
        super().__init__(x, y, 100, 80, BLACK)
        self.speed = random.randint(2, 4)
        self.frames = []
        self.current_frame = 0
        self.last_update_time = pygame.time.get_ticks()
        self.frame_duration = 100  # Durasi tiap frame animasi (ms)
        self.load_frames()

    def load_frames(self):
        try:
            for i in range(1, 6):
                img = pygame.image.load(f'PBO__UAS/enemy1/Walk/walk{i}.png')
                img = pygame.transform.scale(img, (self.rect.width, self.rect.height))
                self.frames.append(img)
        except Exception as e:
            print(f"Error loading enemy images: {e}")
            self.frames = [pygame.Surface((40, 50))]

    def update_animation(self):
        current_time = pygame.time.get_ticks()
        if current_time - self.last_update_time > self.frame_duration:
            self.current_frame = (self.current_frame + 1) % len(self.frames)
            self.last_update_time = current_time

    def move(self):
        self.rect.x -= self.speed

    def draw(self):
        self.update_animation()
        if self.frames:
            flipped_frame = pygame.transform.flip(self.frames[self.current_frame], True, False)
            screen.blit(flipped_frame, self.rect.topleft)

# Finish class
class Finish(GameObject):
    def __init__(self, x, y):
        self.image = pygame.image.load("PBO__UAS/castlee.png").convert_alpha()
        self.image = pygame.transform.scale(self.image, (150, 150))
        super().__init__(x, y, 150, 150, GREEN)

    def draw(self): #polymorphism
        screen.blit(self.image, self.rect.topleft)

# Game class
class Game:
    def __init__(self):
        self.ground_tiles = []
        for i in range(1, 14):
            tile_image = pygame.image.load(f"PBO__UAS/tiles/tile{i}.png").convert_alpha()
            self.ground_tiles.append(pygame.transform.scale(tile_image, (SCREEN_WIDTH // 13, 100)))
        self.tera = Tera()
        self.platforms = [
            Platform(150, 350, 150), 
            Platform(200, 250, 150), 
            Platform(400, 300, 150), 
            Platform(600, 200, 150)
        ]
        self.coins = [Coin(random.randint(100, SCREEN_WIDTH - 50), random.randint(100, 420)) for _ in range(5)]
        self.enemies = [Enemy(SCREEN_WIDTH + i * 200, 450)]
        self.finish = Finish(SCREEN_WIDTH - 140, 360)
        self.score = 0
        self.coins_collected = 0
        self.running = True
        self.state = "start"

    def spawn_enemies(self):
        if random.randint(1, 100) < 2:
            new_enemy_x = SCREEN_WIDTH
            safe_distance = 350
            for enemy in self.enemies:
                if abs(new_enemy_x - enemy.rect.x) < safe_distance:
                    return
            self.enemies.append(Enemy(new_enemy_x, 430))

    def update_enemies(self):
        for enemy in self.enemies[:]:
            enemy.move()
            if enemy.rect.right < 0:
                self.enemies.remove(enemy)

    def check_collisions(self):
        for coin in self.coins[:]:
            if self.tera.rect.colliderect(coin.rect):
                self.coins.remove(coin)
                self.score += 100
                self.coins_collected += 1

        for enemy in self.enemies[:]:
            if self.tera.rect.colliderect(enemy.rect):
                if self.tera.rect.bottom - self.tera._velocity_y <= enemy.rect.top + 5:
                    self.enemies.remove(enemy)
                    self.score += 200
                    self.tera._velocity_y = -10
                elif not self.tera.is_invincible():
                    self.tera.lives -= 1
                    self.tera.last_hit_time = time.time()
                    if self.tera.lives <= 0:
                        self.state = "game_over"

        if self.tera.rect.colliderect(self.finish.rect):
            self.state = "victory"

    def draw_ui(self):
        score_text = font.render(f"SCORE: {self.score}", True, WHITE)
        coins_text = font.render(f"COINS: {self.coins_collected}", True, WHITE)
        lives_text = font.render(f"LIVES: {self.tera.lives}", True, WHITE)
        screen.blit(score_text, (10, 10))
        screen.blit(coins_text, (10, 40))
        screen.blit(lives_text, (700, 10))

    def reset_game(self):
        self.__init__()

    def run(self):
        clock = pygame.time.Clock()
        while self.running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False

            keys = pygame.key.get_pressed()
            if self.state == "start":
                self.start_screen(keys)
            elif self.state == "playing":
                self.playing_state(keys, clock)
            elif self.state == "game_over": 
                self.end_screen("GAME OVER", keys)
            elif self.state == "victory":
                self.end_screen("YOU WIN!", keys)

    def start_screen(self, keys):
        screen.fill(BLUE)
        title = large_font.render("TERRARUN", True, RED)
        instructions = font.render("Press ENTER to Start", True, WHITE)
        screen.blit(title, (SCREEN_WIDTH // 2 - 150, SCREEN_HEIGHT // 2 - 100))
        screen.blit(instructions, (SCREEN_WIDTH // 2 - 130, SCREEN_HEIGHT // 2))
        pygame.display.flip()
        if keys[pygame.K_RETURN]:
            self.state = "playing"

    def draw_ground(self):
        for i, tile in enumerate(self.ground_tiles):
            screen.blit(tile, (i * (SCREEN_WIDTH // 13), SCREEN_HEIGHT - 100))

    def playing_state(self, keys, clock):
        self.tera.move(keys)
        self.tera.apply_gravity(self.platforms)
        self.check_collisions()
        self.spawn_enemies()
        self.update_enemies()

        screen.blit(bg_image, (0, 0))
        self.draw_ground()

        for platform in self.platforms:
            platform.draw()
        for coin in self.coins:
            coin.draw()
        for enemy in self.enemies:
            enemy.draw()

        self.finish.draw()
        self.tera.update_animation()
        self.tera.draw()
        self.draw_ui()

        pygame.display.flip()
        clock.tick(60)

    def end_screen(self, message, keys):
        screen.fill(BLUE)

        text = large_font.render(message, True, GREEN if message == "YOU WIN!" else RED)
        text_rect = text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 - 100))
        screen.blit(text, text_rect)

        score_text = font.render(f"Your Score: {self.score}", True, WHITE)
        score_text_rect = score_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 20))
        screen.blit(score_text, score_text_rect)

        restart_text = font.render("Press R to Restart", True, WHITE)
        restart_text_rect = restart_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 70))
        screen.blit(restart_text, restart_text_rect)

        pygame.display.flip()

        if keys[pygame.K_r]:
            self.reset_game()
            self.state = "start"

# Menjalankan game
game = Game()
game.run()

pygame.quit()
sys.exit()
